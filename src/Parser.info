-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from Parser.y
-----------------------------------------------------------------------------

state 10 contains 1 shift/reduce conflicts.
state 40 contains 1 shift/reduce conflicts.
state 131 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog -> ProgHeader ProgBody '.'                    (1)
	ProgHeader -> program identifier ';'               (2)
	ProgBody -> ConstDecls ProcDecls VarDecls Stm      (3)
	ConstDecls -> const ConstDefSeq                    (4)
	ConstDecls ->                                      (5)
	VarDecls -> var VarDefSeq                          (6)
	VarDecls ->                                        (7)
	ConstDefSeq -> ConstDef                            (8)
	ConstDefSeq -> ConstDef ConstDefSeq                (9)
	VarDefSeq -> VarDef                                (10)
	VarDefSeq -> VarDef VarDefSeq                      (11)
	ConstDef -> identifier '=' numeral ';'             (12)
	VarDef -> identifier ':' Type ';'                  (13)
	Type -> BasicType                                  (14)
	Type -> array '[' Const '..' Const ']' of Type     (15)
	BasicType -> integer                               (16)
	BasicType -> boolean                               (17)
	BasicType -> string                                (18)
	Const -> identifier                                (19)
	Const -> numeral                                   (20)
	Expr -> numeral                                    (21)
	Expr -> str                                        (22)
	Expr -> true                                       (23)
	Expr -> false                                      (24)
	Expr -> VarAccess                                  (25)
	Expr -> Expr '+' Expr                              (26)
	Expr -> Expr '-' Expr                              (27)
	Expr -> Expr '*' Expr                              (28)
	Expr -> Expr 'div' Expr                            (29)
	Expr -> Expr 'mod' Expr                            (30)
	Expr -> Expr '=' Expr                              (31)
	Expr -> Expr '<>' Expr                             (32)
	Expr -> Expr '<' Expr                              (33)
	Expr -> Expr '<=' Expr                             (34)
	Expr -> Expr '>' Expr                              (35)
	Expr -> Expr '>=' Expr                             (36)
	Expr -> Expr 'and' Expr                            (37)
	Expr -> Expr 'or' Expr                             (38)
	Expr -> 'not' Expr                                 (39)
	Expr -> '-' Expr                                   (40)
	Expr -> '(' Expr ')'                               (41)
	Expr -> identifier '(' ExprList ')'                (42)
	VarAccess -> identifier                            (43)
	VarAccess -> identifier '[' Expr ']'               (44)
	ExprList ->                                        (45)
	ExprList -> Expr                                   (46)
	ExprList -> ExprList ',' Expr                      (47)
	Stm -> VarAccess ':=' Expr                         (48)
	Stm -> if Expr then Stm                            (49)
	Stm -> if Expr then Stm else Stm                   (50)
	Stm -> while Expr do Stm                           (51)
	Stm -> for identifier ':=' Expr to Expr do Stm     (52)
	Stm -> break                                       (53)
	Stm -> identifier '(' ExprList ')'                 (54)
	Stm -> begin StmList end                           (55)
	StmList -> Stm                                     (56)
	StmList -> StmList ';' Stm                         (57)
	Proc -> ProcHeader ProcBody ';'                    (58)
	ProcHeader -> procedure identifier '(' ParamList ')' ';'   (59)
	ProcHeader -> function identifier '(' ParamList ')' ':' Type ';'   (60)
	ProcBody -> VarDecls Stm                           (61)
	ProcDecls -> ProcDefSeq                            (62)
	ProcDecls ->                                       (63)
	ProcDefSeq -> Proc                                 (64)
	ProcDefSeq -> ProcDefSeq Proc                      (65)
	ParamList ->                                       (66)
	ParamList -> Param                                 (67)
	ParamList -> ParamList ';' Param                   (68)
	Param -> identifier ':' Type                       (69)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	program        { PROGRAM }
	function       { FUNCTION }
	procedure      { PROCEDURE }
	const          { CONST }
	var            { VAR }
	begin          { BEGIN }
	end            { END }
	if             { IF }
	then           { THEN }
	else           { ELSE }
	while          { WHILE }
	do             { DO }
	for            { FOR }
	to             { TO }
	true           { TRUE }
	false          { FALSE }
	integer        { INT }
	boolean        { BOOL }
	string         { STRING }
	array          { ARRAY }
	of             { OF }
	break          { BREAK }
	identifier     { IDENT $$ }
	numeral        { NUM $$ }
	str            { STR $$ }
	'('            { LPAREN }
	')'            { RPAREN }
	'['            { LSQPAREN }
	']'            { RSQPAREN }
	','            { COMMA }
	'.'            { DOT }
	':'            { COLON }
	';'            { SEMICOLON }
	'+'            { PLUS }
	'-'            { MINUS }
	'*'            { MULT }
	'div'          { DIV }
	'mod'          { MOD }
	'='            { EQUAL }
	'<>'           { NOTEQ }
	'<'            { LESS }
	'<='           { LEQ }
	'>'            { GREATER }
	'>='           { GEQ }
	'and'          { AND }
	'or'           { OR }
	'not'          { NOT }
	':='           { ASSIGN }
	'..'           { RANGE }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rule  1
	ProgHeader      rule  2
	ProgBody        rule  3
	ConstDecls      rules 4, 5
	VarDecls        rules 6, 7
	ConstDefSeq     rules 8, 9
	VarDefSeq       rules 10, 11
	ConstDef        rule  12
	VarDef          rule  13
	Type            rules 14, 15
	BasicType       rules 16, 17, 18
	Const           rules 19, 20
	Expr            rules 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42
	VarAccess       rules 43, 44
	ExprList        rules 45, 46, 47
	Stm             rules 48, 49, 50, 51, 52, 53, 54, 55
	StmList         rules 56, 57
	Proc            rule  58
	ProcHeader      rules 59, 60
	ProcBody        rule  61
	ProcDecls       rules 62, 63
	ProcDefSeq      rules 64, 65
	ParamList       rules 66, 67, 68
	Param           rule  69

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	program        shift, and enter state 3

	Prog           goto state 4
	ProgHeader     goto state 2

State 1


	program        shift, and enter state 3

	ProgHeader     goto state 2

State 2

	Prog -> ProgHeader . ProgBody '.'                   (rule 1)

	function       reduce using rule 5
	procedure      reduce using rule 5
	const          shift, and enter state 8
	var            reduce using rule 5
	begin          reduce using rule 5
	if             reduce using rule 5
	while          reduce using rule 5
	for            reduce using rule 5
	break          reduce using rule 5
	identifier     reduce using rule 5

	ProgBody       goto state 6
	ConstDecls     goto state 7

State 3

	ProgHeader -> program . identifier ';'              (rule 2)

	identifier     shift, and enter state 5


State 4

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 5

	ProgHeader -> program identifier . ';'              (rule 2)

	';'            shift, and enter state 19


State 6

	Prog -> ProgHeader ProgBody . '.'                   (rule 1)

	'.'            shift, and enter state 18


State 7

	ProgBody -> ConstDecls . ProcDecls VarDecls Stm     (rule 3)

	function       shift, and enter state 16
	procedure      shift, and enter state 17
	var            reduce using rule 63
	begin          reduce using rule 63
	if             reduce using rule 63
	while          reduce using rule 63
	for            reduce using rule 63
	break          reduce using rule 63
	identifier     reduce using rule 63

	Proc           goto state 12
	ProcHeader     goto state 13
	ProcDecls      goto state 14
	ProcDefSeq     goto state 15

State 8

	ConstDecls -> const . ConstDefSeq                   (rule 4)

	identifier     shift, and enter state 11

	ConstDefSeq    goto state 9
	ConstDef       goto state 10

State 9

	ConstDecls -> const ConstDefSeq .                   (rule 4)

	function       reduce using rule 4
	procedure      reduce using rule 4
	var            reduce using rule 4
	begin          reduce using rule 4
	if             reduce using rule 4
	while          reduce using rule 4
	for            reduce using rule 4
	break          reduce using rule 4
	identifier     reduce using rule 4


State 10

	ConstDefSeq -> ConstDef .                           (rule 8)
	ConstDefSeq -> ConstDef . ConstDefSeq               (rule 9)

	function       reduce using rule 8
	procedure      reduce using rule 8
	var            reduce using rule 8
	begin          reduce using rule 8
	if             reduce using rule 8
	while          reduce using rule 8
	for            reduce using rule 8
	break          reduce using rule 8
	identifier     shift, and enter state 11
			(reduce using rule 8)


	ConstDefSeq    goto state 28
	ConstDef       goto state 10

State 11

	ConstDef -> identifier . '=' numeral ';'            (rule 12)

	'='            shift, and enter state 27


State 12

	ProcDefSeq -> Proc .                                (rule 64)

	function       reduce using rule 64
	procedure      reduce using rule 64
	var            reduce using rule 64
	begin          reduce using rule 64
	if             reduce using rule 64
	while          reduce using rule 64
	for            reduce using rule 64
	break          reduce using rule 64
	identifier     reduce using rule 64


State 13

	Proc -> ProcHeader . ProcBody ';'                   (rule 58)

	var            shift, and enter state 24
	begin          reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	for            reduce using rule 7
	break          reduce using rule 7
	identifier     reduce using rule 7

	VarDecls       goto state 25
	ProcBody       goto state 26

State 14

	ProgBody -> ConstDecls ProcDecls . VarDecls Stm     (rule 3)

	var            shift, and enter state 24
	begin          reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	for            reduce using rule 7
	break          reduce using rule 7
	identifier     reduce using rule 7

	VarDecls       goto state 23

State 15

	ProcDecls -> ProcDefSeq .                           (rule 62)
	ProcDefSeq -> ProcDefSeq . Proc                     (rule 65)

	function       shift, and enter state 16
	procedure      shift, and enter state 17
	var            reduce using rule 62
	begin          reduce using rule 62
	if             reduce using rule 62
	while          reduce using rule 62
	for            reduce using rule 62
	break          reduce using rule 62
	identifier     reduce using rule 62

	Proc           goto state 22
	ProcHeader     goto state 13

State 16

	ProcHeader -> function . identifier '(' ParamList ')' ':' Type ';'    (rule 60)

	identifier     shift, and enter state 21


State 17

	ProcHeader -> procedure . identifier '(' ParamList ')' ';'    (rule 59)

	identifier     shift, and enter state 20


State 18

	Prog -> ProgHeader ProgBody '.' .                   (rule 1)

	%eof           reduce using rule 1


State 19

	ProgHeader -> program identifier ';' .              (rule 2)

	function       reduce using rule 2
	procedure      reduce using rule 2
	const          reduce using rule 2
	var            reduce using rule 2
	begin          reduce using rule 2
	if             reduce using rule 2
	while          reduce using rule 2
	for            reduce using rule 2
	break          reduce using rule 2
	identifier     reduce using rule 2


State 20

	ProcHeader -> procedure identifier . '(' ParamList ')' ';'    (rule 59)

	'('            shift, and enter state 44


State 21

	ProcHeader -> function identifier . '(' ParamList ')' ':' Type ';'    (rule 60)

	'('            shift, and enter state 43


State 22

	ProcDefSeq -> ProcDefSeq Proc .                     (rule 65)

	function       reduce using rule 65
	procedure      reduce using rule 65
	var            reduce using rule 65
	begin          reduce using rule 65
	if             reduce using rule 65
	while          reduce using rule 65
	for            reduce using rule 65
	break          reduce using rule 65
	identifier     reduce using rule 65


State 23

	ProgBody -> ConstDecls ProcDecls VarDecls . Stm     (rule 3)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 42

State 24

	VarDecls -> var . VarDefSeq                         (rule 6)

	identifier     shift, and enter state 41

	VarDefSeq      goto state 39
	VarDef         goto state 40

State 25

	ProcBody -> VarDecls . Stm                          (rule 61)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 32

State 26

	Proc -> ProcHeader ProcBody . ';'                   (rule 58)

	';'            shift, and enter state 30


State 27

	ConstDef -> identifier '=' . numeral ';'            (rule 12)

	numeral        shift, and enter state 29


State 28

	ConstDefSeq -> ConstDef ConstDefSeq .               (rule 9)

	function       reduce using rule 9
	procedure      reduce using rule 9
	var            reduce using rule 9
	begin          reduce using rule 9
	if             reduce using rule 9
	while          reduce using rule 9
	for            reduce using rule 9
	break          reduce using rule 9
	identifier     reduce using rule 9


State 29

	ConstDef -> identifier '=' numeral . ';'            (rule 12)

	';'            shift, and enter state 68


State 30

	Proc -> ProcHeader ProcBody ';' .                   (rule 58)

	function       reduce using rule 58
	procedure      reduce using rule 58
	var            reduce using rule 58
	begin          reduce using rule 58
	if             reduce using rule 58
	while          reduce using rule 58
	for            reduce using rule 58
	break          reduce using rule 58
	identifier     reduce using rule 58


State 31

	Stm -> VarAccess . ':=' Expr                        (rule 48)

	':='           shift, and enter state 67


State 32

	ProcBody -> VarDecls Stm .                          (rule 61)

	';'            reduce using rule 61


State 33

	Stm -> begin . StmList end                          (rule 55)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 65
	StmList        goto state 66

State 34

	Stm -> if . Expr then Stm                           (rule 49)
	Stm -> if . Expr then Stm else Stm                  (rule 50)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 64
	VarAccess      goto state 55

State 35

	Stm -> while . Expr do Stm                          (rule 51)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 54
	VarAccess      goto state 55

State 36

	Stm -> for . identifier ':=' Expr to Expr do Stm    (rule 52)

	identifier     shift, and enter state 53


State 37

	Stm -> break .                                      (rule 53)

	end            reduce using rule 53
	else           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53


State 38

	VarAccess -> identifier .                           (rule 43)
	VarAccess -> identifier . '[' Expr ']'              (rule 44)
	Stm -> identifier . '(' ExprList ')'                (rule 54)

	'('            shift, and enter state 51
	'['            shift, and enter state 52
	':='           reduce using rule 43


State 39

	VarDecls -> var VarDefSeq .                         (rule 6)

	begin          reduce using rule 6
	if             reduce using rule 6
	while          reduce using rule 6
	for            reduce using rule 6
	break          reduce using rule 6
	identifier     reduce using rule 6


State 40

	VarDefSeq -> VarDef .                               (rule 10)
	VarDefSeq -> VarDef . VarDefSeq                     (rule 11)

	begin          reduce using rule 10
	if             reduce using rule 10
	while          reduce using rule 10
	for            reduce using rule 10
	break          reduce using rule 10
	identifier     shift, and enter state 41
			(reduce using rule 10)


	VarDefSeq      goto state 50
	VarDef         goto state 40

State 41

	VarDef -> identifier . ':' Type ';'                 (rule 13)

	':'            shift, and enter state 49


State 42

	ProgBody -> ConstDecls ProcDecls VarDecls Stm .     (rule 3)

	'.'            reduce using rule 3


State 43

	ProcHeader -> function identifier '(' . ParamList ')' ':' Type ';'    (rule 60)

	identifier     shift, and enter state 47
	')'            reduce using rule 66
	';'            reduce using rule 66

	ParamList      goto state 48
	Param          goto state 46

State 44

	ProcHeader -> procedure identifier '(' . ParamList ')' ';'    (rule 59)

	identifier     shift, and enter state 47
	')'            reduce using rule 66
	';'            reduce using rule 66

	ParamList      goto state 45
	Param          goto state 46

State 45

	ProcHeader -> procedure identifier '(' ParamList . ')' ';'    (rule 59)
	ParamList -> ParamList . ';' Param                  (rule 68)

	')'            shift, and enter state 104
	';'            shift, and enter state 102


State 46

	ParamList -> Param .                                (rule 67)

	')'            reduce using rule 67
	';'            reduce using rule 67


State 47

	Param -> identifier . ':' Type                      (rule 69)

	':'            shift, and enter state 103


State 48

	ProcHeader -> function identifier '(' ParamList . ')' ':' Type ';'    (rule 60)
	ParamList -> ParamList . ';' Param                  (rule 68)

	')'            shift, and enter state 101
	';'            shift, and enter state 102


State 49

	VarDef -> identifier ':' . Type ';'                 (rule 13)

	integer        shift, and enter state 97
	boolean        shift, and enter state 98
	string         shift, and enter state 99
	array          shift, and enter state 100

	Type           goto state 95
	BasicType      goto state 96

State 50

	VarDefSeq -> VarDef VarDefSeq .                     (rule 11)

	begin          reduce using rule 11
	if             reduce using rule 11
	while          reduce using rule 11
	for            reduce using rule 11
	break          reduce using rule 11
	identifier     reduce using rule 11


State 51

	Stm -> identifier '(' . ExprList ')'                (rule 54)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	')'            reduce using rule 45
	','            reduce using rule 45
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 93
	VarAccess      goto state 55
	ExprList       goto state 94

State 52

	VarAccess -> identifier '[' . Expr ']'              (rule 44)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 92
	VarAccess      goto state 55

State 53

	Stm -> for identifier . ':=' Expr to Expr do Stm    (rule 52)

	':='           shift, and enter state 91


State 54

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Stm -> while Expr . do Stm                          (rule 51)

	do             shift, and enter state 90
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 55

	Expr -> VarAccess .                                 (rule 25)

	end            reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	do             reduce using rule 25
	to             reduce using rule 25
	')'            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'div'          reduce using rule 25
	'mod'          reduce using rule 25
	'='            reduce using rule 25
	'<>'           reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	'and'          reduce using rule 25
	'or'           reduce using rule 25


State 56

	Expr -> true .                                      (rule 23)

	end            reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	do             reduce using rule 23
	to             reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'div'          reduce using rule 23
	'mod'          reduce using rule 23
	'='            reduce using rule 23
	'<>'           reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	'and'          reduce using rule 23
	'or'           reduce using rule 23


State 57

	Expr -> false .                                     (rule 24)

	end            reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	do             reduce using rule 24
	to             reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'div'          reduce using rule 24
	'mod'          reduce using rule 24
	'='            reduce using rule 24
	'<>'           reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	'and'          reduce using rule 24
	'or'           reduce using rule 24


State 58

	Expr -> identifier . '(' ExprList ')'               (rule 42)
	VarAccess -> identifier .                           (rule 43)
	VarAccess -> identifier . '[' Expr ']'              (rule 44)

	end            reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	do             reduce using rule 43
	to             reduce using rule 43
	'('            shift, and enter state 89
	')'            reduce using rule 43
	'['            shift, and enter state 52
	']'            reduce using rule 43
	','            reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'div'          reduce using rule 43
	'mod'          reduce using rule 43
	'='            reduce using rule 43
	'<>'           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'and'          reduce using rule 43
	'or'           reduce using rule 43


State 59

	Expr -> numeral .                                   (rule 21)

	end            reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	do             reduce using rule 21
	to             reduce using rule 21
	')'            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'div'          reduce using rule 21
	'mod'          reduce using rule 21
	'='            reduce using rule 21
	'<>'           reduce using rule 21
	'<'            reduce using rule 21
	'<='           reduce using rule 21
	'>'            reduce using rule 21
	'>='           reduce using rule 21
	'and'          reduce using rule 21
	'or'           reduce using rule 21


State 60

	Expr -> str .                                       (rule 22)

	end            reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	do             reduce using rule 22
	to             reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'div'          reduce using rule 22
	'mod'          reduce using rule 22
	'='            reduce using rule 22
	'<>'           reduce using rule 22
	'<'            reduce using rule 22
	'<='           reduce using rule 22
	'>'            reduce using rule 22
	'>='           reduce using rule 22
	'and'          reduce using rule 22
	'or'           reduce using rule 22


State 61

	Expr -> '(' . Expr ')'                              (rule 41)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 88
	VarAccess      goto state 55

State 62

	Expr -> '-' . Expr                                  (rule 40)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 87
	VarAccess      goto state 55

State 63

	Expr -> 'not' . Expr                                (rule 39)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 86
	VarAccess      goto state 55

State 64

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Stm -> if Expr . then Stm                           (rule 49)
	Stm -> if Expr . then Stm else Stm                  (rule 50)

	then           shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 65

	StmList -> Stm .                                    (rule 56)

	end            reduce using rule 56
	';'            reduce using rule 56


State 66

	Stm -> begin StmList . end                          (rule 55)
	StmList -> StmList . ';' Stm                        (rule 57)

	end            shift, and enter state 70
	';'            shift, and enter state 71


State 67

	Stm -> VarAccess ':=' . Expr                        (rule 48)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 69
	VarAccess      goto state 55

State 68

	ConstDef -> identifier '=' numeral ';' .            (rule 12)

	function       reduce using rule 12
	procedure      reduce using rule 12
	var            reduce using rule 12
	begin          reduce using rule 12
	if             reduce using rule 12
	while          reduce using rule 12
	for            reduce using rule 12
	break          reduce using rule 12
	identifier     reduce using rule 12


State 69

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Stm -> VarAccess ':=' Expr .                        (rule 48)

	end            reduce using rule 48
	else           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 70

	Stm -> begin StmList end .                          (rule 55)

	end            reduce using rule 55
	else           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55


State 71

	StmList -> StmList ';' . Stm                        (rule 57)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 132

State 72

	Stm -> if Expr then . Stm                           (rule 49)
	Stm -> if Expr then . Stm else Stm                  (rule 50)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 131

State 73

	Expr -> Expr '+' . Expr                             (rule 26)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 130
	VarAccess      goto state 55

State 74

	Expr -> Expr '-' . Expr                             (rule 27)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 129
	VarAccess      goto state 55

State 75

	Expr -> Expr '*' . Expr                             (rule 28)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 128
	VarAccess      goto state 55

State 76

	Expr -> Expr 'div' . Expr                           (rule 29)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 127
	VarAccess      goto state 55

State 77

	Expr -> Expr 'mod' . Expr                           (rule 30)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 126
	VarAccess      goto state 55

State 78

	Expr -> Expr '=' . Expr                             (rule 31)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 125
	VarAccess      goto state 55

State 79

	Expr -> Expr '<>' . Expr                            (rule 32)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 124
	VarAccess      goto state 55

State 80

	Expr -> Expr '<' . Expr                             (rule 33)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 123
	VarAccess      goto state 55

State 81

	Expr -> Expr '<=' . Expr                            (rule 34)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 122
	VarAccess      goto state 55

State 82

	Expr -> Expr '>' . Expr                             (rule 35)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 121
	VarAccess      goto state 55

State 83

	Expr -> Expr '>=' . Expr                            (rule 36)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 120
	VarAccess      goto state 55

State 84

	Expr -> Expr 'and' . Expr                           (rule 37)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 119
	VarAccess      goto state 55

State 85

	Expr -> Expr 'or' . Expr                            (rule 38)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 118
	VarAccess      goto state 55

State 86

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Expr -> 'not' Expr .                                (rule 39)

	end            reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	do             reduce using rule 39
	to             reduce using rule 39
	')'            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'div'          reduce using rule 39
	'mod'          reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39


State 87

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Expr -> '-' Expr .                                  (rule 40)

	end            reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	do             reduce using rule 40
	to             reduce using rule 40
	')'            reduce using rule 40
	']'            reduce using rule 40
	','            reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            reduce using rule 40
	'<>'           reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'and'          shift, and enter state 84
	'or'           reduce using rule 40


State 88

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Expr -> '(' Expr . ')'                              (rule 41)

	')'            shift, and enter state 117
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 89

	Expr -> identifier '(' . ExprList ')'               (rule 42)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	')'            reduce using rule 45
	','            reduce using rule 45
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 93
	VarAccess      goto state 55
	ExprList       goto state 116

State 90

	Stm -> while Expr do . Stm                          (rule 51)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 115

State 91

	Stm -> for identifier ':=' . Expr to Expr do Stm    (rule 52)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 114
	VarAccess      goto state 55

State 92

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	VarAccess -> identifier '[' Expr . ']'              (rule 44)

	']'            shift, and enter state 113
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 93

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	ExprList -> Expr .                                  (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 94

	ExprList -> ExprList . ',' Expr                     (rule 47)
	Stm -> identifier '(' ExprList . ')'                (rule 54)

	')'            shift, and enter state 111
	','            shift, and enter state 112


State 95

	VarDef -> identifier ':' Type . ';'                 (rule 13)

	';'            shift, and enter state 110


State 96

	Type -> BasicType .                                 (rule 14)

	')'            reduce using rule 14
	';'            reduce using rule 14


State 97

	BasicType -> integer .                              (rule 16)

	')'            reduce using rule 16
	';'            reduce using rule 16


State 98

	BasicType -> boolean .                              (rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17


State 99

	BasicType -> string .                               (rule 18)

	')'            reduce using rule 18
	';'            reduce using rule 18


State 100

	Type -> array . '[' Const '..' Const ']' of Type    (rule 15)

	'['            shift, and enter state 109


State 101

	ProcHeader -> function identifier '(' ParamList ')' . ':' Type ';'    (rule 60)

	':'            shift, and enter state 108


State 102

	ParamList -> ParamList ';' . Param                  (rule 68)

	identifier     shift, and enter state 47

	Param          goto state 107

State 103

	Param -> identifier ':' . Type                      (rule 69)

	integer        shift, and enter state 97
	boolean        shift, and enter state 98
	string         shift, and enter state 99
	array          shift, and enter state 100

	Type           goto state 106
	BasicType      goto state 96

State 104

	ProcHeader -> procedure identifier '(' ParamList ')' . ';'    (rule 59)

	';'            shift, and enter state 105


State 105

	ProcHeader -> procedure identifier '(' ParamList ')' ';' .    (rule 59)

	var            reduce using rule 59
	begin          reduce using rule 59
	if             reduce using rule 59
	while          reduce using rule 59
	for            reduce using rule 59
	break          reduce using rule 59
	identifier     reduce using rule 59


State 106

	Param -> identifier ':' Type .                      (rule 69)

	')'            reduce using rule 69
	';'            reduce using rule 69


State 107

	ParamList -> ParamList ';' Param .                  (rule 68)

	')'            reduce using rule 68
	';'            reduce using rule 68


State 108

	ProcHeader -> function identifier '(' ParamList ')' ':' . Type ';'    (rule 60)

	integer        shift, and enter state 97
	boolean        shift, and enter state 98
	string         shift, and enter state 99
	array          shift, and enter state 100

	Type           goto state 140
	BasicType      goto state 96

State 109

	Type -> array '[' . Const '..' Const ']' of Type    (rule 15)

	identifier     shift, and enter state 138
	numeral        shift, and enter state 139

	Const          goto state 137

State 110

	VarDef -> identifier ':' Type ';' .                 (rule 13)

	begin          reduce using rule 13
	if             reduce using rule 13
	while          reduce using rule 13
	for            reduce using rule 13
	break          reduce using rule 13
	identifier     reduce using rule 13


State 111

	Stm -> identifier '(' ExprList ')' .                (rule 54)

	end            reduce using rule 54
	else           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54


State 112

	ExprList -> ExprList ',' . Expr                     (rule 47)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 136
	VarAccess      goto state 55

State 113

	VarAccess -> identifier '[' Expr ']' .              (rule 44)

	end            reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	do             reduce using rule 44
	to             reduce using rule 44
	')'            reduce using rule 44
	']'            reduce using rule 44
	','            reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'div'          reduce using rule 44
	'mod'          reduce using rule 44
	'='            reduce using rule 44
	'<>'           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'and'          reduce using rule 44
	'or'           reduce using rule 44
	':='           reduce using rule 44


State 114

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Stm -> for identifier ':=' Expr . to Expr do Stm    (rule 52)

	to             shift, and enter state 135
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 115

	Stm -> while Expr do Stm .                          (rule 51)

	end            reduce using rule 51
	else           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51


State 116

	Expr -> identifier '(' ExprList . ')'               (rule 42)
	ExprList -> ExprList . ',' Expr                     (rule 47)

	')'            shift, and enter state 134
	','            shift, and enter state 112


State 117

	Expr -> '(' Expr ')' .                              (rule 41)

	end            reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	do             reduce using rule 41
	to             reduce using rule 41
	')'            reduce using rule 41
	']'            reduce using rule 41
	','            reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'div'          reduce using rule 41
	'mod'          reduce using rule 41
	'='            reduce using rule 41
	'<>'           reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'and'          reduce using rule 41
	'or'           reduce using rule 41


State 118

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Expr -> Expr 'or' Expr .                            (rule 38)

	end            reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	to             reduce using rule 38
	')'            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'and'          shift, and enter state 84
	'or'           reduce using rule 38


State 119

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr 'and' Expr .                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	do             reduce using rule 37
	to             reduce using rule 37
	')'            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'div'          reduce using rule 37
	'mod'          reduce using rule 37
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37


State 120

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr '>=' Expr .                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	do             reduce using rule 36
	to             reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 121

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr '>' Expr .                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	do             reduce using rule 35
	to             reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 122

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr '<=' Expr .                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	do             reduce using rule 34
	to             reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 123

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr '<' Expr .                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	do             reduce using rule 33
	to             reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 124

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr '<>' Expr .                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	do             reduce using rule 32
	to             reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 125

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr '=' Expr .                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	do             reduce using rule 31
	to             reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            fail
	'<>'           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 126

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr 'mod' Expr .                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	do             reduce using rule 30
	to             reduce using rule 30
	')'            reduce using rule 30
	']'            reduce using rule 30
	','            reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'div'          reduce using rule 30
	'mod'          reduce using rule 30
	'='            reduce using rule 30
	'<>'           reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'and'          reduce using rule 30
	'or'           reduce using rule 30


State 127

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr 'div' Expr .                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	do             reduce using rule 29
	to             reduce using rule 29
	')'            reduce using rule 29
	']'            reduce using rule 29
	','            reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'div'          reduce using rule 29
	'mod'          reduce using rule 29
	'='            reduce using rule 29
	'<>'           reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'and'          reduce using rule 29
	'or'           reduce using rule 29


State 128

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr '*' Expr .                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	do             reduce using rule 28
	to             reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'div'          reduce using rule 28
	'mod'          reduce using rule 28
	'='            reduce using rule 28
	'<>'           reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'and'          reduce using rule 28
	'or'           reduce using rule 28


State 129

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr '-' Expr .                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	do             reduce using rule 27
	to             reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            reduce using rule 27
	'<>'           reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'and'          shift, and enter state 84
	'or'           reduce using rule 27


State 130

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr '+' Expr .                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)

	end            reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	do             reduce using rule 26
	to             reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            reduce using rule 26
	'<>'           reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'and'          shift, and enter state 84
	'or'           reduce using rule 26


State 131

	Stm -> if Expr then Stm .                           (rule 49)
	Stm -> if Expr then Stm . else Stm                  (rule 50)

	end            reduce using rule 49
	else           shift, and enter state 133
			(reduce using rule 49)

	'.'            reduce using rule 49
	';'            reduce using rule 49


State 132

	StmList -> StmList ';' Stm .                        (rule 57)

	end            reduce using rule 57
	';'            reduce using rule 57


State 133

	Stm -> if Expr then Stm else . Stm                  (rule 50)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 144

State 134

	Expr -> identifier '(' ExprList ')' .               (rule 42)

	end            reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	do             reduce using rule 42
	to             reduce using rule 42
	')'            reduce using rule 42
	']'            reduce using rule 42
	','            reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'div'          reduce using rule 42
	'mod'          reduce using rule 42
	'='            reduce using rule 42
	'<>'           reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'and'          reduce using rule 42
	'or'           reduce using rule 42


State 135

	Stm -> for identifier ':=' Expr to . Expr do Stm    (rule 52)

	true           shift, and enter state 56
	false          shift, and enter state 57
	identifier     shift, and enter state 58
	numeral        shift, and enter state 59
	str            shift, and enter state 60
	'('            shift, and enter state 61
	'-'            shift, and enter state 62
	'not'          shift, and enter state 63

	Expr           goto state 143
	VarAccess      goto state 55

State 136

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	ExprList -> ExprList ',' Expr .                     (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 137

	Type -> array '[' Const . '..' Const ']' of Type    (rule 15)

	'..'           shift, and enter state 142


State 138

	Const -> identifier .                               (rule 19)

	']'            reduce using rule 19
	'..'           reduce using rule 19


State 139

	Const -> numeral .                                  (rule 20)

	']'            reduce using rule 20
	'..'           reduce using rule 20


State 140

	ProcHeader -> function identifier '(' ParamList ')' ':' Type . ';'    (rule 60)

	';'            shift, and enter state 141


State 141

	ProcHeader -> function identifier '(' ParamList ')' ':' Type ';' .    (rule 60)

	var            reduce using rule 60
	begin          reduce using rule 60
	if             reduce using rule 60
	while          reduce using rule 60
	for            reduce using rule 60
	break          reduce using rule 60
	identifier     reduce using rule 60


State 142

	Type -> array '[' Const '..' . Const ']' of Type    (rule 15)

	identifier     shift, and enter state 138
	numeral        shift, and enter state 139

	Const          goto state 146

State 143

	Expr -> Expr . '+' Expr                             (rule 26)
	Expr -> Expr . '-' Expr                             (rule 27)
	Expr -> Expr . '*' Expr                             (rule 28)
	Expr -> Expr . 'div' Expr                           (rule 29)
	Expr -> Expr . 'mod' Expr                           (rule 30)
	Expr -> Expr . '=' Expr                             (rule 31)
	Expr -> Expr . '<>' Expr                            (rule 32)
	Expr -> Expr . '<' Expr                             (rule 33)
	Expr -> Expr . '<=' Expr                            (rule 34)
	Expr -> Expr . '>' Expr                             (rule 35)
	Expr -> Expr . '>=' Expr                            (rule 36)
	Expr -> Expr . 'and' Expr                           (rule 37)
	Expr -> Expr . 'or' Expr                            (rule 38)
	Stm -> for identifier ':=' Expr to Expr . do Stm    (rule 52)

	do             shift, and enter state 145
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'*'            shift, and enter state 75
	'div'          shift, and enter state 76
	'mod'          shift, and enter state 77
	'='            shift, and enter state 78
	'<>'           shift, and enter state 79
	'<'            shift, and enter state 80
	'<='           shift, and enter state 81
	'>'            shift, and enter state 82
	'>='           shift, and enter state 83
	'and'          shift, and enter state 84
	'or'           shift, and enter state 85


State 144

	Stm -> if Expr then Stm else Stm .                  (rule 50)

	end            reduce using rule 50
	else           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50


State 145

	Stm -> for identifier ':=' Expr to Expr do . Stm    (rule 52)

	begin          shift, and enter state 33
	if             shift, and enter state 34
	while          shift, and enter state 35
	for            shift, and enter state 36
	break          shift, and enter state 37
	identifier     shift, and enter state 38

	VarAccess      goto state 31
	Stm            goto state 148

State 146

	Type -> array '[' Const '..' Const . ']' of Type    (rule 15)

	']'            shift, and enter state 147


State 147

	Type -> array '[' Const '..' Const ']' . of Type    (rule 15)

	of             shift, and enter state 149


State 148

	Stm -> for identifier ':=' Expr to Expr do Stm .    (rule 52)

	end            reduce using rule 52
	else           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52


State 149

	Type -> array '[' Const '..' Const ']' of . Type    (rule 15)

	integer        shift, and enter state 97
	boolean        shift, and enter state 98
	string         shift, and enter state 99
	array          shift, and enter state 100

	Type           goto state 150
	BasicType      goto state 96

State 150

	Type -> array '[' Const '..' Const ']' of Type .    (rule 15)

	')'            reduce using rule 15
	';'            reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 70
Number of terminals: 49
Number of non-terminals: 25
Number of states: 151
